#!/usr/bin/env bash
function help() {
  echo
  echo
  echo "add cac pkcs11 URI to git repo config"
  echo "$ git-config-cac -m set -l <token prefix>"
  echo
  echo "remove cac pkcs11 URI from git repo config"
  echo "$ git-config-cac -m unset"
  echo
  echo "test cac with test URL"
  echo "$ git-config-cac -m test_git -l <token prefix> -u <https://URL>"
  echo "$ git-config-cac -m test_curl -l <token prefix> -u <https://URL>"
  echo
  echo "-m    mode [set | unset | test_git | test_curl]"
  echo "-k    suffix for certificate key label: default=PIV%20Authentication"
  echo "-c    suffix for private key label: default=PIV%20AUTH%20key"
  echo "-l    prefix for token identifier"
  echo "-u    test URL for git or curl test"
}

function get_cert() {
  echo "Searching for token starting with $PRETOKEN"
  TOKEN=($(p11tool --list-tokens | grep -ioe "token=$PRETOKEN\+[a-zA-Z0-9._%]\+"))
  echo "Found token $TOKEN"
  echo
  echo "Searching for certificate label ending with $CERTID"
  CERT_KEY=($(p11tool --list-certs --detailed-url --only-urls pkcs11:$TOKEN | grep -oe "$TOKEN\+[a-zA-Z0-9=%.;]\+$CERTID"))
  echo "Found public key $CERT_KEY" 
  echo
  echo "Searching for private key label ending with $KEYID"
  PRIV_KEY=($(p11tool --list-keys --detailed-url --only-urls --login pkcs11:$TOKEN | grep -oe "$TOKEN\+[a-zA-Z0-9=%.;]\+$KEYID"))
  echo "Found private key $PRIV_KEY"
  echo
}

# Set CAC for local git repo
function set_git() {
  echo -------------------------------------
  echo
  echo "Setting local git repository with http.sslcert, http.sslkey, etc."
  echo Using: $URL
  echo
  git config --local http.sslbackend openssl
  git config --local http.sslengine pkcs11
  git config --local http.sslcert "pkcs11:$CERT_KEY"
  git config --local http.sslcerttype ENG
  git config --local http.sslkey "pkcs11:$PRIV_KEY"
  git config --local http.sslkeytype ENG
}

# Unset CAC for local git repo
function unset_git() {
  echo -------------------------------------
  echo "Unsetting git http.sslcert, http.sslkey, etc."
  echo
  git config --local --unset http.sslcert
  git config --local --unset http.sslcerttype
  git config --local --unset http.sslkey
  git config --local --unset http.sslkeytype
  git config --local --unset http.sslengine
  git config --local --unset http.sslbackend
}

function test_git() {
  echo -------------------------------------
  echo
  echo Testing CAC/ECA certificates with git...
  echo Using: $URL
  echo
  # set verbosity for git trace
  # export GIT_TRACE=1
  export GIT_CURL_VERBOSE=1

  # set verbosity for OpenSC
  # export OPENSC_DEBUG=3
  
  $(brew --prefix git-https-cac)/bin/git \
    -c http.sslverify=false \
    -c http.sslcert="pkcs11:$CERT_KEY" -c http.sslcerttype=ENG \
    -c http.sslkey="pkcs11:$PRIV_KEY" -c http.sslkeytype=ENG \
    -c http.sslbackend=openssl \
    -c http.sslengine=pkcs11 \
    clone $URL 2> test_git_out.txt test_git
  rm -r -f test_git
  echo
}

function test_curl() {
  echo -------------------------------------
  echo 
  echo Testing CAC/ECA certificates with curl...
  echo Using: $URL
  echo
  # explicitly passing flags
  # set environment variables
  export CURL_SSL_BACKEND=openssl

  $(brew --prefix curl)/bin/curl -v -L --engine pkcs11 \
    --cert "pkcs11:$CERT_KEY" --cert-type ENG \
    --key "pkcs11:$PRIV_KEY" --key-type ENG \
    --url "$URL" 2> test_curl_out.txt
  echo
}

echo "==================================="
echo "Use the following command for help:"
echo "$ git-config-cac -h true"
echo -------------------------------------
echo

# default public and private key suffixes
CERTID=PIV%20Authentication
KEYID=PIV%20AUTH%20key

while getopts 'l:m:u:k:c:h:' flag; do
  case "$flag" in
  c)
    CERTID=${OPTARG}
    ;;
  h)
    help
    exit;;
  l)
    PRETOKEN=${OPTARG}
    ;;
  m)
    M=${OPTARG}
    ;;
  k)
    KEYID=${OPTARG}
    ;;
  u)
    URL=${OPTARG}
    ;;
  *)
    echo "invalid flag"
    exit;;
  esac
done

case "$M" in
set)
  get_cert
  set_git
  ;;
unset)
  unset_git
  ;;
test_git)
  get_cert
  test_git
  ;;
test_curl)
  get_cert
  test_curl
  ;;
config)
  get_cert
  set_git
  ;;
esac
