#!/usr/bin/env bash
function help() {
  echo
  echo
  echo "add cac pkcs11 URI to git repo config"
  echo "$ git-config-cac -m set -l <token prefix>"
  echo
  echo "remove cac pkcs11 URI from git repo config"
  echo "$ git-config-cac -m unset"
  echo
  echo "test cac with test URL"
  echo "$ git-config-cac -m test_git -l <token prefix> -u <https://URL>"
  echo "$ git-config-cac -m test_curl -l <token prefix> -u <https://URL>"
  echo
  echo "-m    mode [set | unset | test_git | test_curl]"
  echo "-k    lablel suffix for private key identifier default=PIV%20AUTH%20pubkey"
  echo "-c    label suffix for public key identifier default=PIV%20AUTH%20pubkey"
  echo "-l    prefix for token identifier"
  echo "-u    test URL for git or curl test"
}
# TODO usage documentation

function get_cert() {
  echo
  echo "Searching for token starting with $PRETOKEN"
  TOKEN=($(p11tool --list-tokens | grep -ioe "token=$PRETOKEN\+[a-zA-Z0-9._]\+"))
  echo "Found token $TOKEN"
  echo
  echo "Searching for public key label ending with $CERTID"
  PUBKEY=($(p11tool --list-all --detailed-url --only-urls --login pkcs11:$TOKEN | grep -oe "$TOKEN\+[a-zA-Z0-9=%.;]\+$CERTID"))
  echo "Found public key $PUBKEY" 
  echo
  echo "Searching for private key label ending with $KEYID"
  PRIVKEY=($(p11tool --list-all --detailed-url --only-urls --login pkcs11:$TOKEN | grep -oe "$TOKEN\+[a-zA-Z0-9=%.;]\+$KEYID"))
  echo "Found private key $PRIVKEY"
  echo
}

# Set CAC for local git repo
function set_git() {
  get_cert
  echo "Setting git http.sslcert, http.sslkey, etc."
  git config --local http.sslcert "pkcs11:$PUBKEY"
  git config --local http.sslcerttype ENG
  git config --local http.sslkey "pkcs11:$PRIVKEY"
  git config --local http.sslkeytype ENG
  git config --local http.sslengine pkcs11
}

# Unset CAC for local git repo
function unset_git() {
  echo "Unsetting git http.sslcert, http.sslkey, etc."
  git config --local --unset http.sslcert
  git config --local --unset http.sslcerttype
  git config --local --unset http.sslkey
  git config --local --unset http.sslkeytype
  git config --local --unset http.sslengine
}

function test_git() {
  get_cert
  echo Testing git...
  # sh test_curl-https-cac.sh -c "$TOKEN" -k "$CACKEY" -u "$URL"
  # set verbosity for git trace
  # export GIT_TRACE=1
  # export GIT_CURL_VERBOSE=1
  # set verbosity for cac authentiaction
  # export OPENSC_DEBUG=3
  # export GIT_SSL_CERT_PASSWORD_PROTECTED=1
  export GIT_SSL_CERT="pkcs11:$PUBKEY"
  export GIT_SSL_KEY="pkcs11:$PRIVKEY"
  export GIT_SSL_KEYTYPE=ENG
  export GIT_SSL_CERTTYPE=ENG
  export GIT_SSL_ENGINE=PKCS11
  #export GIT_SSL_BACKEND=openssl
  git fetch --dry-run $URL master
}

function test_curl() {
  get_cert
  echo Testing curl...
  echo Using: $URL
  SSL_CERT="pkcs11:$PUBKEY"
  SSL_KEY="pkcs11:$PRIVKEY"
  # explicitly passing flags
  echo -------------------------------------
  echo Testing curl with flags
  curl -v --engine pkcs11 --cert "pkcs11:$PUBKEY" --cert-type ENG --key "pkcs11:$PRIVKEY" --key-type ENG "$URL"
  # echo
  # echo --------------------------------------
  # echo Testing curl with environment variables
  # TODO currently broken
  # set curl option flags
  # export CULROPT_SSLCERT="pkcs11:$TOKEN"
  # export CURLOPT_SSLKEY="pkcs11:$CACKEY"
  # export CURLOPT_SSLCERTTYPE=ENG
  # export CURLOPT_SSLKEYTYPE=ENG
  # export CURLOPT_SSLENGINE=pkcs11
  # export CURL_SSL_BACKEND=openssl
  # curl -v "$URL"
}


# default public and private key suffixes
CERTID=PIV%20AUTH%20pubkey
KEYID=PIV%20AUTH%20key

while getopts 'l:m:u:k:c:h:' flag; do
  case "$flag" in
  l)
    PRETOKEN=${OPTARG}
    ;;
  m)
    M=${OPTARG}
    ;;
  u)
    URL=${OPTARG}
    ;;
  k)
    KEYID=${OPTARG}
    ;;
  c)
    CERTID=${OPTARG}
    ;;
  h)
    help
    exit;;
  *)
    echo "invalid flag"
    exit;;
  esac
done

case "$M" in
set)
  set_git
  ;;
unset)
  unset_git
  ;;
test_git)
  test_git
  ;;
test_curl)
  test_curl
  ;;
config)
  set_git
  ;;
esac
